version: '3.9'

services:

  zookeeper:
    image: bitnami/zookeeper:latest
    environment:
      - ALLOW_ANONYMOUS_LOGIN=yes
    ports:
      - "2181:2181"

  kafka:
    image: bitnami/kafka:3.5.1
    environment:
      KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
      ALLOW_PLAINTEXT_LISTENER: "yes"
      KAFKA_CFG_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_CFG_BROKER_ID: 1
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    healthcheck:
      test: [ "CMD", "kafka-topics.sh", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ./kafka-init:/kafka-init

  kafka-init:
    image: bitnami/kafka:3.5.1
    command: ["bash", "/kafka-init/create-topics.sh"]
    volumes:
      - ./kafka-init:/kafka-init
    depends_on:
      kafka:
        condition: service_healthy

  valkey:
    image: valkey/valkey:latest
    command: >
      valkey-server --appendonly yes
    environment:
      - VALKEY_APPENDONLY=yes
    ports:
      - "6379:6379"
    volumes:
      - valkey-data:/data

  valkey-replica:
    image: valkey/valkey:latest
    command: >
      valkey-server --appendonly yes --replicaof valkey 6379
    environment:
      - VALKEY_APPENDONLY=yes
    volumes:
      - valkey-replica-data:/data

  popularity-svc:
    build: ./popularity-svc
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC=user_actions
      - VALKEY_HOST=valkey
      - VALKEY_PORT=6379
      - PROM_PORT=9001
    depends_on:
      kafka-init:
        condition: service_completed_successfully
      valkey:
        condition: service_started
    ports:
      - "9001:9001"
    # To scale: docker compose up --scale popularity-svc=3

  item-sim-svc:
    build: ./item-sim-svc
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC=user_actions
      - VALKEY_HOST=valkey
      - VALKEY_PORT=6379
      - PROM_PORT=9002
    depends_on:
      kafka-init:
        condition: service_completed_successfully
      valkey:
        condition: service_started
    ports:
      - "9002:9002"
    # To scale: docker compose up --scale item-sim-svc=3

  user-rec-svc:
    build: ./user-rec-svc
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC=user_actions
      - VALKEY_HOST=valkey
      - VALKEY_PORT=6379
      - PROM_PORT=9003
    depends_on:
      kafka-init:
        condition: service_completed_successfully
      valkey:
        condition: service_started
    ports:
      - "9003:9003"
    # To scale: docker compose up --scale user-rec-svc=3

  api-gateway:
    build: ./api-gateway
    environment:
      - VALKEY_HOST=valkey
      - VALKEY_PORT=6379
    depends_on:
      - valkey
      - popularity-svc
      - item-sim-svc
      - user-rec-svc
    ports:
      - "8000:8000"

  event-gen:
    build: ./event-gen
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - KAFKA_TOPIC=user_actions
    depends_on:
      - kafka

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:9092
    ports:
      - "8080:8080"
    depends_on:
      - kafka

  valkey-ui:
    image: rediscommander/redis-commander:latest
    environment:
      - REDIS_HOSTS=valkey
    ports:
      - "8081:8081"
    depends_on:
      - valkey

volumes:
  valkey-data:
  valkey-replica-data:

# NOTE:
# - To move to K8s/Swarm: Swap Docker Compose services for deployments, set up Service and StatefulSet for Valkey, configure readiness probes, replace bridge network with ClusterIP/Headless Service.
